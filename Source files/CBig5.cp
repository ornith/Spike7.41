// =================================================================================//	CBigView.cp  					©1995-1998 Metrowerks Inc. All rights reserved.// =================================================================================#include <UDrawingState.h>#include "CBig5.h"#include <LString.h>/*#include <UStandardDialogs.h>#if PP_StdDialogs_Option == PP_StdDialogs_Conditional	#include <UConditionalDialogs.h>#endif*/#include "SpikeConstants.h"#include "CStatsWindow.h"Float64 CBig5::sxmin=0;Float64 CBig5::symin=0;Float64 CBig5::sxmax=0;Float64 CBig5::symax=0;Float64 CBig5::sxscale=0;Float64 CBig5::syscale=0;SInt32 CBig5::sxwindmin=0;SInt32 CBig5::sywindmin=0;SInt32 CBig5::sxwindmax=0;SInt32 CBig5::sywindmax=0;// ---------------------------------------------------------------------------------//		¥ CBig5// ---------------------------------------------------------------------------------CBig5::CBig5(){}// ---------------------------------------------------------------------------------//		¥ CBig5(SPaneInfo&, SViewInfo&)// ---------------------------------------------------------------------------------CBig5::CBig5(	const SPaneInfo	&inPaneInfo,	const SViewInfo &inViewInfo )		: LView( inPaneInfo, inViewInfo ){}// ---------------------------------------------------------------------------------//		¥ CBig5(const CBig5&)// ---------------------------------------------------------------------------------CBig5::CBig5(	const CBig5	&inOriginal )		: LView( inOriginal ){}// ---------------------------------------------------------------------------------//		¥ CBig5(LStream*)// ---------------------------------------------------------------------------------CBig5::CBig5(	LStream	*inStream )		: LView( inStream ){}// ---------------------------------------------------------------------------------//		¥ ~CBig5// ---------------------------------------------------------------------------------CBig5::~CBig5(){}// ---------------------------------------------------------------------------------//		¥ FinishCreateSelf// ---------------------------------------------------------------------------------voidCBig5::FinishCreateSelf(){//choose fileCSpike6App::ChooseDocument();//read Bin-file//select template #//make work-Array}// ---------------------------------------------------------------------------------//		¥ DrawSelf// ---------------------------------------------------------------------------------voidCBig5::DrawSelf(){	// Set the font and size.	TextFont( kFontIDGeneva );	TextSize( 9 );	SInt32 xwindmax,xwindmin,ywindmax,ywindmin;	SInt32 i,hpos,vpos,xoffset,yoffset;	Float64 yscale, xscale, xx, yy, minx, maxx,miny,maxy;	Rect kk;	LArray *mArray1=nil;	LArray *mArray2=nil;	mArray1=CStatsWindow::stDrawCol1a;	mArray2=CStatsWindow::stDrawCol2a;	UInt32 cnt1=mArray1->GetCount();	UInt32 cnt2=mArray2->GetCount();	if (cnt1>cnt2){cnt1=cnt2;}	// Calculate the frame rect (local coordinates).	if ((mArray1 != nil) && (mArray2 != nil))		{		Rect	theFrame;		CalcLocalFrameRect( theFrame );		::EraseRect(&theFrame);		xwindmax = theFrame.right-15;		xoffset=35;		yoffset=30;		xwindmin = theFrame.left+xoffset;		ywindmin = theFrame.bottom-yoffset;		ywindmax = theFrame.top+10;    	::MoveTo(xwindmin,ywindmin);    	::LineTo(xwindmin,ywindmax);    	::MoveTo(xwindmin,ywindmin);    	::LineTo(xwindmax,ywindmin);    	//needs to be elaborated    	//get maximum and minimum plotvalues (are statics in CStatWindow)    	minx=CStatsWindow::stMinx2;    	maxx=CStatsWindow::stMaxx2;    	miny=CStatsWindow::stMiny2;    	maxy=CStatsWindow::stMaxy2;    	/*draw only when there is valid data*/    	if ((maxx>minx)and(maxy>miny))    		{    		xscale=(xwindmax-xwindmin)/(maxx-minx);   			yscale=(ywindmin-ywindmax)/(maxy-miny);   	 		//move to first datapoint    		mArray1->FetchItemAt(1,&xx);    		mArray2->FetchItemAt(1,&yy);    		hpos=xscale*(xx-minx)+xwindmin;    		vpos=ywindmin-yscale*(yy-miny);    		::MoveTo(hpos,vpos);    		for (i=2;i<=cnt1; i++)    			{    			mArray1->FetchItemAt(i,&xx);    			mArray2->FetchItemAt(i,&yy);    			hpos=xscale*(xx-minx)+xwindmin;    			vpos=ywindmin-yscale*(yy-miny);    			::SetRect(&kk, hpos-1, vpos-1, hpos + 1, vpos + 1);				::FrameRect(&kk);    			//::LineTo(hpos,vpos);    			//::MoveTo(hpos,vpos);    			}    		MoveTo(xwindmin-15,ywindmin+15);			LStr255 str(minx,"\p####.#");    		DrawString(str);    		MoveTo(xwindmax-15,ywindmin+15);    		str.Assign(maxx,"\p####.#");    		DrawString(str);    		MoveTo(xwindmin-20,ywindmin);    		str.Assign(miny,"\p####.#");    		DrawString(str);    		MoveTo(xwindmin-20,ywindmax);    		str.Assign(maxy,"\p####.#");    		DrawString(str);    		sxmin=minx;			symin=miny;			sxmax=maxx;			symax=maxy;			sxscale=xscale;			syscale=yscale;			sxwindmin=xwindmin;			sywindmin=ywindmin;			sxwindmax=xwindmax;			sywindmax=ywindmax;			}		}}