// =================================================================================//	CBigView.cp  					©1995-1998 Metrowerks Inc. All rights reserved.// =================================================================================#include <UDrawingState.h>#include <LMarqueeTask.h>#include "CBig2.h"#include "SpikeConstants.h"//#include "CSpikeApp.h"                                                          #include "CMonteWindow.h"Float64 CBig2::sxmin=0;Float64 CBig2::symin=0;Float64 CBig2::sxmax=0;Float64 CBig2::symax=0;Float64 CBig2::sxscale=0;Float64 CBig2::syscale=0;SInt32 CBig2::sxwindmin=0;SInt32 CBig2::sywindmin=0;SInt32 CBig2::sxwindmax=0;SInt32 CBig2::sywindmax=0;// ---------------------------------------------------------------------------------//		¥ CBig2// ---------------------------------------------------------------------------------CBig2::CBig2(){}// ---------------------------------------------------------------------------------//		¥ CBig2(SPaneInfo&, SViewInfo&)// ---------------------------------------------------------------------------------CBig2::CBig2(	const SPaneInfo	&inPaneInfo,	const SViewInfo &inViewInfo )		: LView( inPaneInfo, inViewInfo ){}// ---------------------------------------------------------------------------------//		¥ CBig2(const CBig2&)// ---------------------------------------------------------------------------------CBig2::CBig2(	const CBig2	&inOriginal )		: LView( inOriginal ){}// ---------------------------------------------------------------------------------//		¥ CBig2(LStream*)// ---------------------------------------------------------------------------------CBig2::CBig2(	LStream	*inStream )		: LView( inStream ){}// ---------------------------------------------------------------------------------//		¥ ~CBig2// ---------------------------------------------------------------------------------CBig2::~CBig2(){}// ---------------------------------------------------------------------------------//		¥ DrawSelf// ---------------------------------------------------------------------------------voidCBig2::DrawSelf(){	Str255 str;	Rect kk;	// Set the font and size.	TextFont( kFontIDGeneva );	TextSize( 9 );	SInt32 xwindmax,xwindmin,ywindmax,ywindmin;	SInt32 i,hpos,vpos,xoffset,yoffset;	Float64 yscale, xscale, xx, yy, minx, maxx,miny,maxy;	LArray *mArray1=nil;	LArray *mArray2=nil;	if (CMonteWindow::DrawFlag1)		{		mArray1=CMonteWindow::simCol1;		mArray2=CMonteWindow::simCol2;		}	else if (CMonteWindow::DrawFlag2)		{		mArray1=CMonteWindow::simCol1;		mArray2=CMonteWindow::BreakArray2;		}	else if (CMonteWindow::DrawFlag3)		{		mArray1=CMonteWindow::RXY1;		mArray2=CMonteWindow::RXY2;		}	UInt32 cnt1=0;	UInt32 cnt2=0;	// Calculate the frame rect (local coordinates).	if ((mArray1 != nil) && (mArray2 != nil))		{		cnt1=mArray1->GetCount();		cnt2=mArray2->GetCount();		Rect	theFrame;		CalcLocalFrameRect( theFrame );		::EraseRect(&theFrame);		xwindmax = theFrame.right-15;		xoffset=30;		yoffset=25;		xwindmin = theFrame.left+xoffset;		ywindmin = theFrame.bottom-yoffset;		ywindmax = theFrame.top+10;    	::MoveTo(xwindmin,ywindmin);    	::LineTo(xwindmin,ywindmax);    	::MoveTo(xwindmin,ywindmin);    	::LineTo(xwindmax,ywindmin);    	//needs to be elaborated    	//find maximum and minimum plotvalues (are in sDrawArray)    	minx=100000000;    	maxx=-100000000;    	miny=100000000;    	maxy=-100000000;    	for (i=1;i<= cnt1; i++)    		{    		mArray1->FetchItemAt(i,&xx);    		if (xx<minx) {minx=xx;}    		if (xx>maxx) {maxx=xx;}    		mArray2->FetchItemAt(i,&yy);    		if (yy<miny) {miny=yy;}    		if (yy>maxy) {maxy=yy;}    		}    	/*draw only when there is valid data*/    	if ((maxx>minx)and(maxy>miny))    		{    		xscale=(xwindmax-xwindmin)/(maxx-minx);   			yscale=(ywindmin-ywindmax)/(maxy-miny);   	 		//move to first datapoint    		mArray1->FetchItemAt(1,&xx);    		mArray2->FetchItemAt(1,&yy);    		hpos=xscale*(xx-minx)+xwindmin;    		vpos=ywindmin-yscale*(yy-miny);    		::MoveTo(hpos,vpos);    		for (i=2;i<=cnt1; i++)    			{    			mArray1->FetchItemAt(i,&xx);    			mArray2->FetchItemAt(i,&yy);    			hpos=xscale*(xx-minx)+xwindmin;    			vpos=ywindmin-yscale*(yy-miny);    			if (CMonteWindow::DrawFlag1)    				{    				::SetRect(&kk, hpos-1, vpos-1, hpos + 1, vpos + 1);					::FrameRect(&kk);    				}    			else    				{    				::LineTo(hpos,vpos);    				::MoveTo(hpos,vpos);    				}    			}    		MoveTo(xwindmin-10,ywindmin+20);    		NumToString(minx,str);    		DrawString(str);    		MoveTo(xwindmax-10,ywindmin+20);    		NumToString(maxx,str);    		DrawString(str);    		MoveTo(xwindmin-30,ywindmin+5);    		NumToString(miny,str);    		DrawString(str);    		MoveTo(xwindmin-30,ywindmax+5);    		NumToString(maxy,str);    		DrawString(str);    		sxmin=minx;			symin=miny;			sxmax=maxx;			symax=maxy;			sxscale=xscale;			syscale=yscale;			sxwindmin=xwindmin;			sywindmin=ywindmin;			sxwindmax=xwindmax;			sywindmax=ywindmax;			}		}}